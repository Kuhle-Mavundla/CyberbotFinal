using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Media;
using System.Speech.Synthesis;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows;
using System.Windows.Threading;
using CyberbotFinal.Pages;

namespace CyberbotFinal
// Ensure the MainWindow.xaml file exists in your project and is properly linked to this code-behind file.  
// The InitializeComponent method is automatically generated by the XAML compiler and is defined in the partial class.  
// If the error persists, check the following:  

// 1. Verify that the MainWindow.xaml file is present in your project and correctly named.  
// 2. Ensure the Build Action for MainWindow.xaml is set to "Page" in the file properties.  
// 3. Confirm that the MainWindow.xaml file contains the correct root element and matches the class name in this code-behind file.  

// Example root element in MainWindow.xaml:  
// <Window x:Class="CyberBotFinal.MainWindow"  
//         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
//         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
//         Title="MainWindow" Height="450" Width="800">  
// </Window>  

// If the above steps are correct and the error persists, rebuild your project to regenerate the InitializeComponent method.
{
    public partial class MainWindow : Window
    {
        // Memory and state
        List<string> topicsDiscussed = new List<string>();
        string userName = "";
        string userInterest = "";
        SpeechSynthesizer synthesizer = new SpeechSynthesizer();

        public MainWindow()
        {
            InitializeComponent();
            PlayGreetingAudio("cyber_greeting.wav");

            Dispatcher.InvokeAsync(() =>
            {
                AddToChat("CyberBot: Like I have mentioned, my name is CyberBot and I am your digital assistant for cybersecurity.");
                AddToChat("CyberBot: What is your name?");
            });
        }
            private void GoToTask_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.Navigate(new TaskAssistantPage());
        }

        private void GoToTips_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.Navigate(new CyberTipsPage());
        }

        private void GoToQuiz_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.Navigate(new QuizPage());
        }

        private void GoToMainChat_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.Content = null;
        }

        private void SendButton_Click(object sender, RoutedEventArgs e)
        {
            string userInput = UserInput.Text.Trim();
            if (string.IsNullOrEmpty(userInput)) return;

            AddToChat($"You: {userInput}");
            UserInput.Clear();

            if (string.IsNullOrEmpty(userName))
            {
                userName = userInput;
                AddToChat($"\nWelcome, {userName}!");
                AddToChat("You can ask me about topics like:\n- 'phishing'\n- 'strong passwords'\n- 'malware'\n- 'ransomware'\n- 'firewall'");
                AddToChat("Or say things like 'I'm worried about scams' or 'I'm interested in privacy'. Type 'exit' anytime to quit.");
                return;
            }

            userInput = userInput.ToLower();

            if (userInput == "exit")
            {
                HandleExit();
                return;
            }

            if (userInput.StartsWith("i'm interested in"))
            {
                userInterest = userInput.Replace("i'm interested in", "").Trim();
                string msg = $"Great! I'll remember that you're interested in {userInterest}. It's a crucial part of staying safe online.";
                Respond(msg);
                return;
            }

            if (userInput.Contains("worried") || userInput.Contains("scared") || userInput.Contains("anxious"))
            {
                string supportMsg = "It's completely understandable to feel that way. Scammers can be very convincing. Let me share some tips to help you stay safe.";
                Respond(supportMsg);
                ShareCyberTips();
                return;
            }

            if (userInput.Contains("tell me more") || userInput.Contains("more about"))
            {
                string[] words = userInput.Split(' ');
                string keyword = words.Last();
                HandleUserQuery(keyword);
                return;
            }

            HandleUserQuery(userInput);
        }

        void AddToChat(string message)
        {
            ChatBox.Items.Add(message);
        }

        void Respond(string message)
        {
            AddToChat("CyberBot: " + message);
            synthesizer.SpeakAsync(message);
        }

        void PlayGreetingAudio(string filePath)
        {
            try
            {
                string fullPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", filePath);
                if (File.Exists(fullPath))
                {
                    SoundPlayer player = new SoundPlayer(fullPath);
                    player.PlaySync();
                }
                else
                {
                    AddToChat($"[Error] File not found: {fullPath}");
                }
            }
            catch (Exception ex)
            {
                AddToChat($"[Error] Playing audio: {ex.Message}");
            }
        }

        void HandleUserQuery(string input)
        {
            Dictionary<string, List<string>> responses = new Dictionary<string, List<string>>
            {
                {"help", new List<string> { "You can ask about: phishing, strong passwords, malware, ransomware, or firewall." }},
                {"phishing", new List<string> {
                    "Be cautious of emails asking for personal information.",
                    "Always verify the sender's email before clicking links.",
                    "Look for spelling errors in scam emails."
                }},
                {"strong passwords", new List<string> {
                    "Use a mix of characters. Avoid personal details.",
                    "Consider using a password manager.",
                    "Change passwords often and avoid reusing them."
                }},
                {"malware", new List<string> {
                    "Malware is harmful software. Avoid unknown sources.",
                    "Keep antivirus software updated.",
                    "Be cautious with email attachments and downloads."
                }},
                {"ransomware", new List<string> {
                    "Ransomware locks your data. Keep backups!",
                    "Don't pay the ransom—it’s not guaranteed.",
                    "Update software and avoid suspicious files."
                }},
                {"firewall", new List<string> {
                    "A firewall protects you from unauthorized access.",
                    "Keep it enabled to block malicious traffic.",
                    "Use both hardware and software firewalls."
                }},
                {"how are you", new List<string> { "I'm always functioning at peak performance—no emotions, just security!" }},
                {"what's your purpose", new List<string> { "I'm here to help you stay safe online." }},
                {"what can i ask you about", new List<string> { "Topics like phishing, malware, passwords, firewalls, and tips!" }}
            };

            if (responses.ContainsKey(input))
            {
                string response = GetRandomResponse(responses[input]);
                Respond(response);

                if (!topicsDiscussed.Contains(input) && input != "help")
                    topicsDiscussed.Add(input);

                if (!string.IsNullOrEmpty(userInterest))
                {
                    string tip = $"Since you're interested in {userInterest}, you might want to check related security practices.";
                    Respond(tip);
                }
            }
            else
            {
                string closestMatch = FindClosestMatch(input, responses.Keys.ToList());
                if (closestMatch != null)
                {
                    string response = GetRandomResponse(responses[closestMatch]);
                    Respond($"Did you mean '{closestMatch}'? {response}");
                }
                else
                {
                    AddToChat($"CyberBot: Hmm, I’m not sure about that, {userName}. Want some general cybersecurity tips? (yes/no)");
                }
            }
        }

        string GetRandomResponse(List<string> responses)
        {
            Random random = new Random();
            return responses[random.Next(responses.Count)];
        }

        string FindClosestMatch(string input, List<string> options)
        {
            return options.OrderBy(option => LevenshteinDistance(input, option)).FirstOrDefault();
        }

        int LevenshteinDistance(string s, string t)
        {
            int n = s.Length, m = t.Length;
            var d = new int[n + 1, m + 1];

            for (int i = 0; i <= n; i++) d[i, 0] = i;
            for (int j = 0; j <= m; j++) d[0, j] = j;

            for (int i = 1; i <= n; i++)
            {
                for (int j = 1; j <= m; j++)
                {
                    int cost = (s[i - 1] == t[j - 1]) ? 0 : 1;
                    d[i, j] = Math.Min(Math.Min(d[i - 1, j] + 1, d[i, j - 1] + 1), d[i - 1, j - 1] + cost);
                }
            }
            return d[n, m];
        }

        void ShareCyberTips()
        {
            Respond("Here are some general cybersecurity tips:");
            Respond("1️ Use strong, unique passwords.");
            Respond("2️ Enable two-factor authentication.");
            Respond("3️ Be cautious of unexpected emails or links.");
            Respond("4️ Keep your software and antivirus updated.");
            Respond("5️ Back up your data regularly.");
        }

        void HandleExit()
        {
            if (topicsDiscussed.Count == 0)
            {
                Respond("You didn’t even ask me a single cybersecurity question. Keep in mind that online safety starts with awareness.");
            }
            else
            {
                Respond("You showed interest in:");
                foreach (var topic in topicsDiscussed)
                {
                    AddToChat($" - {topic}");
                }

                if (!string.IsNullOrEmpty(userInterest))
                {
                    Respond($"And I remember you're interested in: {userInterest}");
                }

                Respond("To learn more, check out these resources:");
                Respond("https://staysafeonline.org");
                Respond("https://www.cyber.gov.au");
                Respond("https://www.cisa.gov");
            }

            Respond("Goodbye! Stay safe and stay alert online.");
        }
    }
}
